import logging
import requests
import time
import os
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import asyncio
import aiohttp
from datetime import datetime
import pytz
import signal
import sys

# ... (–∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ)
from flask import Flask, jsonify
import threading

app = Flask(__name__)

@app.route('/health')
def health_check():
    return jsonify(status="ok"), 200

def run_flask():
    from waitress import serve  # –î–æ–±–∞–≤–ª—è–µ–º production-ready —Å–µ—Ä–≤–µ—Ä
    logging.basicConfig(level=logging.INFO)
    serve(app, host='0.0.0.0', port=8080)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)

def get_avito_messages(token, last_timestamp):
    url = f'https://api.avito.ru/messenger/v1/accounts/{AVITO_USER_ID}/chats'  # v3 ‚Üí v1
    headers = {
        'Authorization': f'Bearer {token}',
        'Accept': 'application/vnd.avito.messenger+json; version=1'
    }
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)

def get_avito_chat_history(token, chat_id):
    url = f'https://api.avito.ru/messenger/v1/accounts/{AVITO_USER_ID}/chats/{chat_id}/messages'  # v3 ‚Üí v1
    headers = {
        'Authorization': f'Bearer {token}',
        'Accept': 'application/vnd.avito.messenger+json; version=1'
    }
    
    full_history = []
    page = 1
    per_page = 50
    
    while True:
        params = {'page': page, 'per_page': per_page}
        try:
            response = requests.get(url, headers=headers, params=params, timeout=30)
            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ API –ê–≤–∏—Ç–æ: {response.status_code} - {response.text}")
                break
                
            data = response.json()
            messages = data.get('data', {}).get('messages', [])
            if not messages:
                break
                
            for msg in messages:
                # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
                full_history.append({...})
                
            if len(messages) < per_page:
                break
                
            page += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            break
            
    return full_history

async def main() -> None:
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
AVITO_CLIENT_ID = os.getenv('AVITO_CLIENT_ID')
AVITO_CLIENT_SECRET = os.getenv('AVITO_CLIENT_SECRET')
AVITO_USER_ID = os.getenv('AVITO_USER_ID')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([AVITO_CLIENT_ID, AVITO_CLIENT_SECRET, AVITO_USER_ID, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]):
    logging.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã")
    exit(1)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_to_telegram(bot, message_data, is_system=False):
    try:
        if is_system:
            text = f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message_data['text']}"
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
            logging.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            return
        
        moscow_tz = pytz.timezone('Europe/Moscow')
        message_time = datetime.fromtimestamp(message_data['timestamp'], moscow_tz)
        formatted_time = message_time.strftime('%H:%M')
        user_id = message_data.get('user_id', 'unknown')
        public_key = message_data.get('public_key', 'unknown')
        item_id = message_data.get('item_id', 'unknown')
        message_id = message_data.get('message_id', 'unknown')
        logging.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: user_id={user_id}, public_key={public_key}, item_id={item_id}, message_id={message_id}")
        
        if message_id in processed_messages:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        processed_messages.add(message_id)
        
        user_link = f"<a href=\"https://www.avito.ru/brands/i121955125\">{message_data['sender']}</a>"
        item_link = f"<a href=\"https://www.avito.ru/{item_id}\">{message_data['item_title']}</a>" if item_id != 'unknown' and item_id.isdigit() else message_data['item_title']
        text = (
            f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"–ê–∫–∫–∞—É–Ω—Ç: –ú–æ–π –Ω–æ—É—Ç–±—É–∫\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_link}\n"
            f"üìå –û–±—ä—è–≤–ª–µ–Ω–∏–µ: {item_link}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_data['text']}¬ª\n"
            f"üïí –í—Ä–µ–º—è: {formatted_time} (–ø–æ –ú–æ—Å–∫–≤–µ)"
        )
        
        keyboard = [
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message_data['chat_id']}")],
            [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=f"history_{message_data['chat_id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ê–≤–∏—Ç–æ
def get_avito_token():
    url = 'https://api.avito.ru/token'
    data = {
        'grant_type': 'client_credentials',
        'client_id': AVITO_CLIENT_ID,
        'client_secret': AVITO_CLIENT_SECRET,
        'scope': 'messenger'
    }
    try:
        response = requests.post(url, data=data, timeout=30)
        response.raise_for_status()
        token_data = response.json()
        logging.info(f"–¢–æ–∫–µ–Ω –ê–≤–∏—Ç–æ –ø–æ–ª—É—á–µ–Ω: {token_data.get('access_token')[:10]}...")
        return token_data.get('access_token')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ê–≤–∏—Ç–æ: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ê–≤–∏—Ç–æ
def get_avito_messages(token, last_timestamp):
    url = f'https://api.avito.ru/messenger/v2/accounts/{AVITO_USER_ID}/chats'
    headers = {'Authorization': f'Bearer {token}'}
    try:
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        logging.info("–û—Ç–≤–µ—Ç API –ê–≤–∏—Ç–æ: " + response.text[:100])
        data = response.json()
        chats = data.get('chats', [])
        new_messages = []

        for chat in chats:
            last_message = chat.get('last_message', {})
            message_time = last_message.get('created', 0)
            message_id = str(last_message.get('id', 'unknown'))
            if message_time > last_timestamp and last_message.get('direction') == 'in' and message_id not in processed_messages:
                sender = next((user['name'] for user in chat['users'] if user['id'] != int(AVITO_USER_ID)), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                user_id = next((str(user['id']) for user in chat['users'] if user['id'] != int(AVITO_USER_ID)), 'unknown')
                public_key = next((user.get('public_key', 'unknown') for user in chat['users'] if user['id'] != int(AVITO_USER_ID)), 'unknown')
                message_text = last_message.get('content', {}).get('text', '')
                chat_id = chat.get('id', '')
                item_title = chat.get('context', {}).get('value', {}).get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
                item_id = str(chat.get('context', {}).get('value', {}).get('id', 'unknown'))
                new_messages.append({
                    'chat_id': chat_id,
                    'sender': sender,
                    'user_id': user_id,
                    'public_key': public_key,
                    'text': message_text,
                    'timestamp': message_time,
                    'item_title': item_title,
                    'item_id': item_id,
                    'message_id': message_id
                })
        logging.info("–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
        return new_messages, max([msg['timestamp'] for msg in new_messages] + [last_timestamp])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ê–≤–∏—Ç–æ: {e}")
        return [], last_timestamp

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ê–≤–∏—Ç–æ
def get_avito_chat_history(token, chat_id):
    url = f'https://api.avito.ru/messenger/v3/accounts/{AVITO_USER_ID}/chats/{chat_id}/messages'
    headers = {'Authorization': f'Bearer {token}'}
    try:
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code == 200:
            logging.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: " + response.text[:100])
            data = response.json()
            messages = data.get('messages', [])
            history = []
            moscow_tz = pytz.timezone('Europe/Moscow')
            for msg in messages:
                sender_id = msg.get('user_id', 'unknown')
                sender = '–í—ã' if sender_id == int(AVITO_USER_ID) else next((user['name'] for user in msg.get('users', []) if user['id'] == sender_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                message_time = datetime.fromtimestamp(msg.get('created', 0), moscow_tz).strftime('%H:%M %d.%m.%Y')
                text = msg.get('content', {}).get('text', '')
                history.append({
                    'time': message_time,
                    'sender': sender,
                    'text': text
                })
            return history
        else:
            logging.error(f"–û—à–∏–±–∫–∞ API –ê–≤–∏—Ç–æ: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ê–≤–∏—Ç–æ
async def send_avito_message(token, chat_id, message):
    url = f'https://api.avito.ru/messenger/v1/accounts/{AVITO_USER_ID}/chats/{chat_id}/messages'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.avito.messenger+json; version=1'
    }
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Avito
    data = {
        "content": {
            "type": "text",
            "text": message
        }
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    logging.info(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}: {message}")
                    return True
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    error_text = await response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ API –ê–≤–∏—Ç–æ ({response.status}): {error_text}")
                    return False
    except Exception as e:
        logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ê–≤–∏—Ç–æ: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ê–≤–∏—Ç–æ.')
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        args = context.args
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /reply –ø–æ–ª—É—á–µ–Ω–∞: args={args}")
        
        if len(args) < 2:
            await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <chat_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>')
            logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reply")
            return
        
        chat_id = args[0]
        message = ' '.join(args[1:])
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {message}")
        
        token = get_avito_token()
        if token:
            success = await send_avito_message(token, chat_id, message)
            if success:
                await update.message.reply_text(f'‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}')
                logging.info(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Avito")
            else:
                await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ê–≤–∏—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.')
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API Avito")
        else:
            await update.message.reply_text('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ê–≤–∏—Ç–æ.')
            logging.error("–¢–æ–∫–µ–Ω Avito –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /reply: {e}")
        await update.message.reply_text(f'üö® –û—à–∏–±–∫–∞: {str(e)}')

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        args = context.args
        if len(args) != 1:
            await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <chat_id>')
            return
        chat_id = args[0]
        token = get_avito_token()
        if token:
            history_messages = get_avito_chat_history(token, chat_id)
            if history_messages:
                history_text = f"–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}:\n"
                for msg in history_messages:
                    history_text += f"üïí {msg['time']} | –û—Ç: {msg['sender']} | –°–æ–æ–±—â–µ–Ω–∏–µ: {msg['text']}\n"
                await update.message.reply_text(history_text)
            else:
                await update.message.reply_text(f'–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id} –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ê–≤–∏—Ç–æ.')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /history: {e}")
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    chat_id = data.split('_')[1]
    
    if data.startswith('reply_'):
        logging.info(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        await query.message.reply_text(
            f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n'
            f'/reply {chat_id} <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>'
        )
    elif data.startswith('history_'):
        logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏' –Ω–∞–∂–∞—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        token = get_avito_token()
        if token:
            history_messages = get_avito_chat_history(token, chat_id)
            if history_messages:
                history_text = f"–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}:\n"
                for msg in history_messages:
                    history_text += f"üïí {msg['time']} | –û—Ç: {msg['sender']} | –°–æ–æ–±—â–µ–Ω–∏–µ: {msg['text']}\n"
                await query.message.reply_text(history_text)
            else:
                await query.message.reply_text(f'–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id} –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        else:
            await query.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ê–≤–∏—Ç–æ.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def handle_exit(signum, frame):
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    sys.exit(0)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application –≤–º–µ—Å—Ç–æ Updater
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    bot = application.bot
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reply", reply))
    application.add_handler(CommandHandler("history", history))
    application.add_handler(CallbackQueryHandler(button_callback, pattern='^(reply_|history_)'))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    logging.info("–ë–æ—Ç Telegram –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ê–≤–∏—Ç–æ
    last_timestamp = int(time.time()) - 3600
    token_error_count = 0
    
    while True:
        token = get_avito_token()
        if token:
            token_error_count = 0
            new_messages, last_timestamp = get_avito_messages(token, last_timestamp)
            for msg in new_messages:
                await send_to_telegram(bot, msg)
        else:
            token_error_count += 1
            if token_error_count <= 3:
                await send_to_telegram(bot, {
                    'text': '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ê–≤–∏—Ç–æ',
                    'timestamp': int(time.time())
                }, is_system=True)
        await asyncio.sleep(60)

if __name__ == '__main__':
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, handle_exit)
    signal.signal(signal.SIGTERM, handle_exit)
    
    try:
        asyncio.run(main())
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        bot = Bot(token=TELEGRAM_TOKEN)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(send_to_telegram(bot, {
            'text': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}',
            'timestamp': int(time.time())
        }, is_system=True))
        loop.close()
